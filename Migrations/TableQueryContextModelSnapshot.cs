// <auto-generated />
using System;
using Data_query.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data_query.Migrations
{
    [DbContext(typeof(TableQueryContext))]
    partial class TableQueryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Data_query.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("domain");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Domain" }, "domain")
                        .IsUnique();

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("Data_query.Models.EmployeeEventStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("assigned_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<bool?>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_completed")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<int>("StepId")
                        .HasColumnType("int")
                        .HasColumnName("step_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EmployeeId" }, "employee_id");

                    b.HasIndex(new[] { "EventId" }, "event_id");

                    b.HasIndex(new[] { "ManagerId" }, "manager_id");

                    b.HasIndex(new[] { "StepId" }, "step_id");

                    b.ToTable("employee_event_steps", (string)null);
                });

            modelBuilder.Entity("Data_query.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("category");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CompanyId" }, "company_id");

                    b.HasIndex(new[] { "CreatedBy" }, "created_by");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("Data_query.Models.Input", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HtmlElement")
                        .HasColumnType("text")
                        .HasColumnName("html_element");

                    b.Property<string>("InputLabel")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("input_label");

                    b.Property<string>("InputName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("input_name");

                    b.Property<string>("InputType")
                        .IsRequired()
                        .HasColumnType("enum('text','number','date','textarea','checkbox','radio','select')")
                        .HasColumnName("input_type");

                    b.Property<bool?>("IsEditable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_editable")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool?>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_required")
                        .HasDefaultValueSql("'0'");

                    b.Property<bool?>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_visible")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Options")
                        .HasColumnType("json")
                        .HasColumnName("options");

                    b.Property<int>("SheetId")
                        .HasColumnType("int")
                        .HasColumnName("sheet_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SheetId" }, "sheet_id");

                    b.ToTable("inputs", (string)null);
                });

            modelBuilder.Entity("Data_query.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("CanEdit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_edit")
                        .HasDefaultValueSql("'0'");

                    b.Property<bool?>("CanView")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_view")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("InputId")
                        .HasColumnType("int")
                        .HasColumnName("input_id");

                    b.Property<bool?>("IsHidden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_hidden")
                        .HasDefaultValueSql("'0'");

                    b.Property<bool?>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_required")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "InputId" }, "input_id");

                    b.HasIndex(new[] { "RoleId" }, "role_id");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("Data_query.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Data_query.Models.Sheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<string>("HtmlContent")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("html_content");

                    b.Property<string>("SheetName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("sheet_name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EventId" }, "event_id")
                        .HasDatabaseName("event_id1");

                    b.ToTable("sheets", (string)null);
                });

            modelBuilder.Entity("Data_query.Models.SsoSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("LoginTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("login_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("SsoToken")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("sso_token");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CompanyId" }, "company_id")
                        .HasDatabaseName("company_id1");

                    b.HasIndex(new[] { "SsoToken" }, "sso_token")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "user_id");

                    b.ToTable("sso_sessions", (string)null);
                });

            modelBuilder.Entity("Data_query.Models.Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("step_name");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int")
                        .HasColumnName("step_order");

                    b.Property<string>("StepType")
                        .IsRequired()
                        .HasColumnType("enum('Employee','Manager')")
                        .HasColumnName("step_type");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CreatedBy" }, "created_by")
                        .HasDatabaseName("created_by1");

                    b.HasIndex(new[] { "EventId" }, "event_id")
                        .HasDatabaseName("event_id2");

                    b.ToTable("steps", (string)null);
                });

            modelBuilder.Entity("Data_query.Models.StepResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EmployeeEventStepId")
                        .HasColumnType("int")
                        .HasColumnName("employee_event_step_id");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("int")
                        .HasColumnName("evaluator_id");

                    b.Property<string>("InputData")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("input_data");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Pending','In Progress','Completed')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'In Progress'");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EmployeeEventStepId" }, "employee_event_step_id");

                    b.HasIndex(new[] { "EvaluatorId" }, "evaluator_id");

                    b.ToTable("step_results", (string)null);
                });

            modelBuilder.Entity("Data_query.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CompanyId" }, "company_id")
                        .HasDatabaseName("company_id2");

                    b.HasIndex(new[] { "Email" }, "email")
                        .IsUnique();

                    b.HasIndex(new[] { "RoleId" }, "role_id")
                        .HasDatabaseName("role_id1");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Data_query.Models.EmployeeEventStep", b =>
                {
                    b.HasOne("Data_query.Models.User", "Employee")
                        .WithMany("EmployeeEventStepEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("employee_event_steps_ibfk_1");

                    b.HasOne("Data_query.Models.Event", "Event")
                        .WithMany("EmployeeEventSteps")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("employee_event_steps_ibfk_2");

                    b.HasOne("Data_query.Models.User", "Manager")
                        .WithMany("EmployeeEventStepManagers")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("employee_event_steps_ibfk_4");

                    b.HasOne("Data_query.Models.Step", "Step")
                        .WithMany("EmployeeEventSteps")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("employee_event_steps_ibfk_3");

                    b.Navigation("Employee");

                    b.Navigation("Event");

                    b.Navigation("Manager");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Data_query.Models.Event", b =>
                {
                    b.HasOne("Data_query.Models.Company", "Company")
                        .WithMany("Events")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("events_ibfk_1");

                    b.HasOne("Data_query.Models.User", "CreatedByNavigation")
                        .WithMany("Events")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("events_ibfk_2");

                    b.Navigation("Company");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("Data_query.Models.Input", b =>
                {
                    b.HasOne("Data_query.Models.Sheet", "Sheet")
                        .WithMany("Inputs")
                        .HasForeignKey("SheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("inputs_ibfk_1");

                    b.Navigation("Sheet");
                });

            modelBuilder.Entity("Data_query.Models.Permission", b =>
                {
                    b.HasOne("Data_query.Models.Input", "Input")
                        .WithMany("Permissions")
                        .HasForeignKey("InputId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("permissions_ibfk_1");

                    b.HasOne("Data_query.Models.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("permissions_ibfk_2");

                    b.Navigation("Input");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Data_query.Models.Sheet", b =>
                {
                    b.HasOne("Data_query.Models.Event", "Event")
                        .WithMany("Sheets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sheets_ibfk_1");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Data_query.Models.SsoSession", b =>
                {
                    b.HasOne("Data_query.Models.Company", "Company")
                        .WithMany("SsoSessions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("sso_sessions_ibfk_2");

                    b.HasOne("Data_query.Models.User", "User")
                        .WithMany("SsoSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("sso_sessions_ibfk_1");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data_query.Models.Step", b =>
                {
                    b.HasOne("Data_query.Models.User", "CreatedByNavigation")
                        .WithMany("Steps")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("steps_ibfk_2");

                    b.HasOne("Data_query.Models.Event", "Event")
                        .WithMany("Steps")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("steps_ibfk_1");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Data_query.Models.StepResult", b =>
                {
                    b.HasOne("Data_query.Models.EmployeeEventStep", "EmployeeEventStep")
                        .WithMany("StepResults")
                        .HasForeignKey("EmployeeEventStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("step_results_ibfk_1");

                    b.HasOne("Data_query.Models.User", "Evaluator")
                        .WithMany("StepResults")
                        .HasForeignKey("EvaluatorId")
                        .IsRequired()
                        .HasConstraintName("step_results_ibfk_2");

                    b.Navigation("EmployeeEventStep");

                    b.Navigation("Evaluator");
                });

            modelBuilder.Entity("Data_query.Models.User", b =>
                {
                    b.HasOne("Data_query.Models.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("users_ibfk_1");

                    b.HasOne("Data_query.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("users_ibfk_2");

                    b.Navigation("Company");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Data_query.Models.Company", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("SsoSessions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Data_query.Models.EmployeeEventStep", b =>
                {
                    b.Navigation("StepResults");
                });

            modelBuilder.Entity("Data_query.Models.Event", b =>
                {
                    b.Navigation("EmployeeEventSteps");

                    b.Navigation("Sheets");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Data_query.Models.Input", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Data_query.Models.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Data_query.Models.Sheet", b =>
                {
                    b.Navigation("Inputs");
                });

            modelBuilder.Entity("Data_query.Models.Step", b =>
                {
                    b.Navigation("EmployeeEventSteps");
                });

            modelBuilder.Entity("Data_query.Models.User", b =>
                {
                    b.Navigation("EmployeeEventStepEmployees");

                    b.Navigation("EmployeeEventStepManagers");

                    b.Navigation("Events");

                    b.Navigation("SsoSessions");

                    b.Navigation("StepResults");

                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
